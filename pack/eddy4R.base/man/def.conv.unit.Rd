% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/def.conv.unit.R
\name{def.conv.unit}
\alias{def.conv.unit}
\title{Unit conversion}
\usage{
def.conv.unit(data, unitFrom = "arb", unitTo = "arb",
  coefPoly = base::lapply(base::as.data.frame(data), function(x) c(0, 1)),
  vrbs = FALSE)
}
\arguments{
\item{\code{data}}{Required. A named data frame of type numeric, containing the data to be converted. 
A numeric vector input is also allowed if only 1 variable is to be converted.}

\item{\code{unitFrom}}{Optional. The current units of \code{data}. Either: \cr 
(1) the case-sensitive character string "intl", signifying the current units are in the internal 
unit base (see documentation for eddy4R.base internal data Unit$Intl). \cr
(2) a named list or vector of type character containing the existing units of the corresponding variable 
in \code{data} (see rules below for formatting unit character strings). Note, if a character vector 
containing only one unit string is specified, it will be used for all variables in \code{data}.\cr
(3) the case-sensitive character string "arb" (default), signifying the current units are arbitrarily 
defined and numerical scale factors for conversion are given within input parameter \code{coefPoly}.}

\item{\code{unitTo}}{Optional if \code{unitFrom = "arb"}. The units to convert to.
Either: \cr 
(1) the character string "intl", signifying to convert to the internal unit base. In this case, 
input parameter \code{unitFrom} must be a named list of units to convert from). \cr
(2) a named list or vector of type character containing the desired output units of the corresponding variable 
in \code{data} (see rules below for formatting unit character strings). Note, if a character vector 
containing only one unit string is specified, it will be used for all variables in \code{data}.\cr
(3) the character string "arb" (default), signifying the current units are arbitrarily defined and numerical
scale factors for conversion are given within input parameter \code{coefPoly}.
\cr
Use the following rules to construct unit character strings: \cr
Unit character strings must be constructed from the base unit symbols (case-sensitive) listed 
in eddy4R.base internal data Unit$Base$Symb (e.g. the symbol for meter is "m"). \cr
\cr
Unit base symbols can be directly preceded (no space) by the case-sensitive unit prefixes listed in 
eddy4R.base internal data Unit$Prfx (e.g. kilometers = "km") . \cr
 \cr
Unit base symbols can be directly followed (no spaces) by the suffix \code{n}, where \code{n} is 
an integer (...-2,-1,0,1,2...), indicating the unit is raised to the power of 
\code{n} (e.g. per square kilometer = "km-2").  \cr
\cr
In the case of chemical species (i.e. converting between mass and molar units), specify
the full unit (including prefix and suffix) followed immediately (no spaces inbetween) by one of 
the chemical species characters listed in eddy4R.base internal data Unit$Spcs 
(eg. per gram of carbon dioxide = "g-1CO2"): \cr
\cr
Compound units can be formed by inserting spaces between the individual unit components 
(ex.milligrams carbon per meter squared per day = "mgC m-2 d-1").\cr

\cr
Additional rules for unit conversion: \cr
(1) Number of input & output base units must be the same. \cr
(2) Input-output units must be mapped 1-to-1, position-wise in the compound unit string. 
Thus, it is recommended to express units in the highest level available (i.e. if wanting to 
convert pressure units from pounds per square inch to Pascals, use "psi" and "Pa" rather 
than "lbf in2" and "Pa". The latter will result in an error. \cr
(3) Except for mass to mole conversions, you can only convert within the same unit type  
(i.e. you can't go from pressure to force/area, even tho these are technically compatible.  
Check documentation for eddy4R.base::Unit to see unit types) \cr
(4) Suffixes (powers) between corresponding input & output terms must be the same.
(5) If a conversion polynomial has more than the a1 term (a0,a2,... i.e more than a 
linear multiplier), there must be only one base term in each the input and output (i.e. a 
single-unit conversion, ex. degrees F to C) and the unit suffix must be 1 (no powers). 
This is because internally-defined conversion polynomials reflect the conversion 
between actual values of the units, not how a change in one unit results in a change 
in the other (i.e. the derivative). \cr
(6) If converting to/from the eddy4R internal unit base, mass to mol conversions are only allowed
for single gas species (i.e. CO2, H2O, CH4). No gas mixtures other than dry air are allowed. This 
is relevant for moist air, which must be converted to molar units outside of this unit conversion 
function.
\cr}

\item{\code{coefPoly}}{Optional. A named list of type numeric, containing the polynomial 
coefficients (in increasing order) to apply to the corresponding variable in \code{data}. 
Each entry in the named list contains a numerical vector of [a0 a1 a2 a3 ...] signifying the 
coeficients of the equation a0 + a1*x + a2*x^2 + a3*x^3 ... , where x is the input data.
Default is c(0,1) for each variable in \code{data}. Note: If unitFrom and unitTo are input along
with coefPoly, coefPoly is applied first. Then the unit transformation from \code{unitFrom} to
\code{unitTo} is performed.}
}
\value{
Function output format depends on input parameter \code{vrbs}. \cr
If \code{vrbs} is set to \code{FALSE} (default), the function returns a vector or named data frame 
(matching the input format of \code{data}) with unit conversion 
applied. Attribute \code{unit} (queried by base::attributes()) specifies the output units. All 
attributes attached to input \code{data} are retained. \cr
If \code{vrbs} is set to \code{TRUE}, the function returns a named list containing the following:\cr
data = a named data frame (matching the input variables of \code{data}) with unit conversion applied \cr
coefPoly = a named list containing the numerical scaling coefficients applied for each variable \cr
unitFrom = a named list containing the unit character strings of each input variable \cr
unitTo = a named list containing the unit character strings of each output variable
}
\description{
Function definition. Convert data between units using unit character strings 
or numerical conversion factors
}
\examples{
Currently none
}
\author{
Cove Sturtevant \email{eddy4R.info@gmail.com}
}
\references{
license: Terms of use of the NEON FIU algorithm repository dated 2015-01-16
}
\seealso{
\code{\link{Unit}}, \code{\link{def.unit.info}}, \code{\link{def.unit.intl}}
}
\keyword{conversion,}
\keyword{input}
\keyword{output}
\keyword{unit}
\keyword{units}
\keyword{units,}

